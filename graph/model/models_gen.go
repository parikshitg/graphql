// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Author struct {
	ID        int    `json:"id"`
	Firstname string `json:"firstname"`
	Lastname  string `json:"lastname"`
	Nickname  string `json:"nickname"`
}

type AuthorInput struct {
	ID        int    `json:"id"`
	Firstname string `json:"firstname"`
	Lastname  string `json:"lastname"`
	Nickname  string `json:"nickname"`
}

type Blog struct {
	ID     int     `json:"id"`
	Title  string  `json:"title"`
	Body   string  `json:"body"`
	Date   string  `json:"date"`
	Author *Author `json:"author"`
	Status Status  `json:"status"`
}

type BlogInput struct {
	Title  string       `json:"title"`
	Body   string       `json:"body"`
	Date   string       `json:"date"`
	Author *AuthorInput `json:"author"`
}

type Status string

const (
	StatusPublished Status = "PUBLISHED"
	StatusDraft     Status = "DRAFT"
	StatusDeleted   Status = "DELETED"
)

var AllStatus = []Status{
	StatusPublished,
	StatusDraft,
	StatusDeleted,
}

func (e Status) IsValid() bool {
	switch e {
	case StatusPublished, StatusDraft, StatusDeleted:
		return true
	}
	return false
}

func (e Status) String() string {
	return string(e)
}

func (e *Status) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Status(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}

func (e Status) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
